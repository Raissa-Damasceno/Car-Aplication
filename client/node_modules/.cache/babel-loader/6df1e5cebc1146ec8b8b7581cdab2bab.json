{"ast":null,"code":"var _jsxFileName = \"/Users/raissadamasceno/Desktop/rummo-challenge/client/src/components/CarsListTest.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { experimentalStyled as styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = 'http://localhost:8000/api/cars';\nconst Item = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return { ...theme.typography.body2,\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  };\n});\n_c = Item;\nexport default function ResponsiveGrid() {\n  _s();\n\n  const [cars, setCars] = useState([]);\n\n  const getAllCars = async () => {\n    try {\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n      setCars(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllCars();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: {\n        xs: 2,\n        md: 2\n      },\n      columns: {\n        xs: 4,\n        sm: 8,\n        md: 12\n      },\n      children: Array.from(Array(1000)).map((_, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        sm: 6,\n        md: 2,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          children: cars.map(oneCar => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [oneCar.BRAND, oneCar.MODEL, oneCar.DEALER, oneCar.MIN_MILEAGE, oneCar.MAX_MILEAGE]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResponsiveGrid, \"/EQt6wAxOgtQYDavlJ/SWb5B/tI=\");\n\n_c2 = ResponsiveGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Item\");\n$RefreshReg$(_c2, \"ResponsiveGrid\");","map":{"version":3,"sources":["/Users/raissadamasceno/Desktop/rummo-challenge/client/src/components/CarsListTest.js"],"names":["useState","useEffect","experimentalStyled","styled","Box","Paper","Grid","apiUrl","Item","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","ResponsiveGrid","cars","setCars","getAllCars","response","fetch","data","json","error","console","log","flexGrow","xs","md","sm","Array","from","map","_","index","oneCar","BRAND","MODEL","DEALER","MIN_MILEAGE","MAX_MILEAGE"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,kBAAkB,IAAIC,MAA/B,QAA6C,sBAA7C;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,MAAMC,MAAM,GAAG,gCAAf;AAEA,MAAMC,IAAI,GAAGL,MAAM,CAACE,KAAD,CAAN,CAAc;AAAA,MAAC;AAAEI,IAAAA;AAAF,GAAD;AAAA,SAAgB,EACzC,GAAGA,KAAK,CAACC,UAAN,CAAiBC,KADqB;AAEzCC,IAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAFgC;AAGzCC,IAAAA,SAAS,EAAE,QAH8B;AAIzCC,IAAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcC,IAAd,CAAmBC;AAJe,GAAhB;AAAA,CAAd,CAAb;KAAMV,I;AAON,eAAe,SAASW,cAAT,GAA0B;AAAA;;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMsB,UAAU,GAAG,YAAY;AAC3B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACjB,MAAD,CAA5B;AACA,YAAMkB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAL,MAAAA,OAAO,CAACI,IAAD,CAAP;AAEH,KALD,CAKE,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GATD;;AAWA1B,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAGF,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAT;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OAAzB;AAA2C,MAAA,OAAO,EAAE;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASE,QAAAA,EAAE,EAAE,CAAb;AAAgBD,QAAAA,EAAE,EAAE;AAApB,OAApD;AAAA,gBACGE,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,IAAD,CAAhB,EAAwBE,GAAxB,CAA4B,CAACC,CAAD,EAAIC,KAAJ,kBAC3B,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAyB,QAAA,EAAE,EAAE,CAA7B;AAAA,+BACE,QAAC,IAAD;AAAA,oBAAOlB,IAAI,CAACgB,GAAL,CAAUG,MAAD,IAAY;AACxB,gCACI;AAAA,yBACKA,MAAM,CAACC,KADZ,EAEKD,MAAM,CAACE,KAFZ,EAGKF,MAAM,CAACG,MAHZ,EAIKH,MAAM,CAACI,WAJZ,EAKKJ,MAAM,CAACK,WALZ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ;AASH,WAVM;AAAP;AAAA;AAAA;AAAA;AAAA;AADF,SAAqCN,KAArC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAtCuBnB,c;;MAAAA,c","sourcesContent":["import { useState, useEffect } from 'react'\nimport { experimentalStyled as styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\n\nconst apiUrl = 'http://localhost:8000/api/cars'\n\nconst Item = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(2),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}));\n\nexport default function ResponsiveGrid() {\n    const [cars, setCars] = useState([])\n\n    const getAllCars = async () => {\n        try {\n            const response = await fetch(apiUrl)\n            const data = await response.json()\n            setCars(data)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    useEffect(() => {\n        getAllCars()\n    }, [])\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={{ xs: 2, md: 2 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n        {Array.from(Array(1000)).map((_, index) => (\n          <Grid item xs={2} sm={6} md={2} key={index}>\n            <Item>{cars.map((oneCar) => {\n                return (\n                    <div>\n                        {oneCar.BRAND}\n                        {oneCar.MODEL}\n                        {oneCar.DEALER}\n                        {oneCar.MIN_MILEAGE}\n                        {oneCar.MAX_MILEAGE}\n                    </div>\n                )\n            })}</Item>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}"]},"metadata":{},"sourceType":"module"}